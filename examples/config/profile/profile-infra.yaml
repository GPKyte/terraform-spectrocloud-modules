name: profile_infra
description: profile_infra
type: cluster
defaultRepoURL: "${REPO_URL}"

packs:
  - name: "amazon-linux-eks"
    type: "spectro"
    layer: "os"
    server: "${SPECTRO_REPO_URL}"
    version: "1.0.0"
    values: "# AMI will be selected automatically based on the kubernetes version, region chosen"

  - name: "kubernetes-eks"
    type: "spectro"
    layer: "k8s"
    server: "${SPECTRO_REPO_URL}"
    version: "1.20"
    tag: "1.20.x"
    values: |
      # spectrocloud.com/enabled-presets: Control Plane Logging:logging-disabled
      ## EKS settings
      managedControlPlane:

      ## Controlplane Logging
      logging:

      # Setting to toggle Kubernetes API Server logging (kube-apiserver)
      apiServer: false

      # Setting to toggle the Kubernetes API audit logging
      audit: false

      # Setting to toggle the cluster authentication logging
      authenticator: false

      # Setting to toggle the controller manager (kube-controller-manager) logging
      controllerManager: false

      # Setting to toggle the Kubernetes scheduler (kube-scheduler) logging
      scheduler: false

      # OIDC related config
      # Uncomment below section when the EKS cluster has to be setup with OIDC authentication.
      # Note : Leave the param values in this config as is, so that validation for these params will happen during cluster provisioning
      oidcIdentityProvider:

      #The name of the OIDC provider configuration
      identityProviderConfigName: oidc1

      # The ID for the client application that makes authentication requests to the OpenID identity provider
      clientId: "${OIDC_CLIENT_ID}"

      #The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens
      issuerUrl: "${OIDC_ISSUER_URL}"

      usernamePrefix: \"-\"

      usernameClaim: email

      groupsClaim: cognito:groups

      clientConfig:
      oidc-issuer-url: \"%oidcIssuerUrlMacro%\"
      oidc-client-id: \"%oidcClientIdMacro%\"
      oidc-extra-scope: profile,email


      ## Custom EKS node roleName for all the node groups
      ## This self-managed IAM role(https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) should include the required
      ## policies - 'AmazonEKSWorkerNodePolicy','AmazonEC2ContainerRegistryReadOnly', 'AmazonSSMManagedInstanceCore' and 'AmazonEKS_CNI_Policy'
      ## NOTE: The roleName cannot have the prefix 'ng-role_' since this is reserved for spectro-generated roles
      managedMachinePool:
      roleName: spectrocloud-eks-iam-role

      ## A list of additional policies to attach to the node group role
      #roleAdditionalPolicies:
      #- {{ arn for the policy1 | format \"${string}\" }}
      #- {{ arn for the policy2 | format \"${string}\" }}

  - name: "cni-aws-vpc-eks"
    layer: "cni"
    server: "${SPECTRO_REPO_URL}"
    type: "spectro"
    values: "# AWS VPC CNI will be auto-installed"
    version: "1.0"

  - name: "csi-aws"
    layer: "csi"
    server: "${SPECTRO_REPO_URL}"
    type: "spectro"
    version: "1.0.0"
    values: |
      manifests:
      aws_ebs:

      #Storage type should be one of io1, gp2, sc1, st1 types
      #Check https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html for more details
      storageType: \"gp2\"

      #Allowed reclaim policies are Delete, Retain
      reclaimPolicy: \"Delete\"

      #Toggle for Volume expansion
      allowVolumeExpansion: \"true\"

      #Toggle for Default class
      isDefaultClass: \"true\"

      #Supported binding modes are Immediate, WaitForFirstConsumer
      #Setting this to WaitForFirstConsumer for AWS, so that the volumes gets created in the same AZ as that of the pods
      volumeBindingMode: \"WaitForFirstConsumer\"

  - name: "aws-ssm-agent"
    layer: "addon"
    server: "${SPECTRO_REPO_URL}"
    type: "spectro"
    version: "1.0.0"
    values: |
      pack:
        spectrocloud.com/install-priority: "0"
      manifests:
        # Amazon Linux 2 doesn't have a provision to install ssm agent by default and will be fixed in future ami's
        # https://github.com/aws/containers-roadmap/issues/593#issuecomment-823768607
        # Meanwhile, this Daemonset will help install aws ssm agent into all nodes
        aws-ssm-agent:
          contents: >
            apiVersion: apps/v1

            kind: DaemonSet

            metadata:
              name: eks-host-config
              namespace: kube-system
            spec:
              selector:
                matchLabels:
                  app: eks-host-config
              template:
                metadata:
                  name: eks-host-config
                  labels:
                    app: eks-host-config
                spec:
                  initContainers:
                    - name: ssm-install-unit
                      image: debian:buster
                      command:
                        - sh
                        - -c
                        - |
                          set -x

                          # Add unit file to install the SSM agent
                          cat >/etc/systemd/system/install-ssm.service <<EOF
                          [Unit]
                          Description=Install the SSM agent

                          [Service]
                          Type=oneshot
                          ExecStart=/bin/sh -c "yum install -y amazon-ssm-agent; systemctl enable amazon-ssm-agent; systemctl start amazon-ssm-agent"

                          [Install]
                          WantedBy=multi-user.target
                          EOF

                          systemctl daemon-reload
                          systemctl enable install-ssm.service
                          systemctl start install-ssm.service

                          # Check and print SSM agent status
                          systemctl status amazon-ssm-agent

                      volumeMounts:
                        - name: etc-systemd
                          mountPath: /etc/systemd/system
                        - name: bin-systemctl
                          mountPath: /bin/systemctl
                        - name: libgcrypt
                          mountPath: /usr/lib/x86_64-linux-gnu/libgcrypt.so.11
                        - name: run-systemd
                          mountPath: /run/systemd
                      resources:
                        limits:
                          cpu: 100m
                          memory: 256Mi
                        requests:
                          cpu: 100m
                          memory: 256Mi
                  containers:
                    - name: pause
                      image: gcr.io/google_containers/pause
                  volumes:
                    # To write install-ssm.service file
                    - name: etc-systemd
                      hostPath:
                        path: /etc/systemd/system
                        type: Directory
                    # systemctl command
                    - name: bin-systemctl
                      hostPath:
                        path: /bin/systemctl
                        type: File
                    # Required lib for systemctl
                    - name: libgcrypt
                      hostPath:
                        path: /lib64/libgcrypt.so.11
                        type: File
                    # systemd's runtime socket
                    - name: run-systemd
                      hostPath:
                        path: /run/systemd
                        type: Directory

  - name: "spectro-rbac"
    layer: "addon"
    server: "${SPECTRO_REPO_URL}"
    type: "spectro"
    version: "1.0.0"
    values: |
      pack:
        spectrocloud.com/install-priority: "0"
      charts:
        spectro-rbac:
          # Specify one or more ClusterRoleBinding
          # Note that the _name_ attribute is optional
          clusterRoleBindings:
            - role: admin
              name: special-override-name
              subjects:
                - type: User
                  name: user5
                - type: Group
                  name: group5
            - role: view
              subjects:
                - type: User
                  name: user6
                - type: Group
                  name: group6
                - type: ServiceAccount
                  name: group6
                  namespace: foo
          namespaces:
            # Specify one or more RoleBindings
            # Note that the _name_ attribute in the subjects is optional
            - namespace: team1
              createNamespace: true
              roleBindings:
                - role: admin
                  name: special-override-name-role
                  kind: ClusterRole
                  subjects:
                    - type: User
                      name: user3
                    - type: Group
                      name: group3
                - role: view
                  kind: ClusterRole
                  subjects:
                    - type: User
                      name: user4
                    - type: Group
                      name: group4
            - namespace: team2
              createNamespace: true
              roleBindings:
                - role: admin
                  name: special
                  kind: ClusterRole
                  subjects:
                    - type: User
                      name: user1
                    - type: Group
                      name: group1

  - name: "spectro-byo-manifest"
    layer: "addon"
    server: "${SPECTRO_REPO_URL}"
    type: "spectro"
    version: "1.0.0"
    values: |
      pack:
        spectrocloud.com/install-priority: "0"
      manifests:
        byo-manifest:
          contents: >

            # Add the kubernetes resource templates you want to be applied on the cluster

            # Use --- delimiter when adding multiple resources

            # Note: Make sure to include all resource dependencies here


            apiVersion: v1

            kind: Namespace

            metadata:
              labels:
                app: wordpress
              name: wordpress
            ---

            apiVersion: v1

            kind: Service

            metadata:
              name: wordpress-mysql
              namespace: wordpress
              labels:
                app: wordpress
            spec:
              ports:
                - port: 3306
              selector:
                app: wordpress
                tier: mysql
              clusterIP: None
            ---

            apiVersion: v1

            kind: Secret

            metadata:
              name: mysql-pass
              namespace: wordpress
              labels:
                app: wordpress
            stringData:
              password: hello123
            ---

            apiVersion: v1

            kind: PersistentVolumeClaim

            metadata:
              name: mysql-pv-claim
              namespace: wordpress
              labels:
                app: wordpress
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 20Gi
            ---

            apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2

            kind: Deployment

            metadata:
              name: wordpress-mysql
              namespace: wordpress
              labels:
                app: wordpress
            spec:
              selector:
                matchLabels:
                  app: wordpress
                  tier: mysql
              strategy:
                type: Recreate
              template:
                metadata:
                  labels:
                    app: wordpress
                    tier: mysql
                spec:
                  containers:
                  - image: mysql:5.6
                    name: mysql
                    env:
                    - name: MYSQL_ROOT_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: mysql-pass
                          key: password
                    ports:
                    - containerPort: 3306
                      name: mysql
                    volumeMounts:
                    - name: mysql-persistent-storage
                      mountPath: /var/lib/mysql
                  volumes:
                  - name: mysql-persistent-storage
                    persistentVolumeClaim:
                      claimName: mysql-pv-claim
            ---

            apiVersion: v1

            kind: Service

            metadata:
              name: wordpress
              namespace: wordpress
              labels:
                app: wordpress
            spec:
              ports:
                - port: 80
              selector:
                app: wordpress
                tier: frontend
              type: LoadBalancer
            ---

            apiVersion: v1

            kind: PersistentVolumeClaim

            metadata:
              name: wp-pv-claim
              namespace: wordpress
              labels:
                app: wordpress
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 20Gi
            ---

            apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2

            kind: Deployment

            metadata:
              name: wordpress
              namespace: wordpress
              labels:
                app: wordpress
            spec:
              selector:
                matchLabels:
                  app: wordpress
                  tier: frontend
              strategy:
                type: Recreate
              template:
                metadata:
                  labels:
                    app: wordpress
                    tier: frontend
                spec:
                  containers:
                  - image: wordpress:4.8-apache
                    name: wordpress
                    env:
                    - name: WORDPRESS_DB_HOST
                      value: wordpress-mysql
                    - name: WORDPRESS_DB_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: mysql-pass
                          key: password
                    ports:
                    - containerPort: 80
                      name: wordpress
                    volumeMounts:
                    - name: wordpress-persistent-storage
                      mountPath: /var/www/html
                  volumes:
                  - name: wordpress-persistent-storage
                    persistentVolumeClaim:
                      claimName: wp-pv-claim

  - name: "spectro-proxy"
    layer: "addon"
    server: "${SPECTRO_REPO_URL}"
    type: "spectro"
    version: "1.0.0"
    values: |
      pack:
        spectrocloud.com/install-priority: "0"
      manifests:
        spectro-proxy:
          namespace: cluster-{{ .spectro.system.cluster.uid }}
          server: "{{ .spectro.system.reverseproxy.server }}"
          # Cluster UID - DO NOT CHANGE (new3)
          clusterUid: "{{ .spectro.system.cluster.uid }}"
          subdomain: cluster-{{ .spectro.system.cluster.uid }}